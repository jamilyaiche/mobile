// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextInput tests test all props Right Icon Text input snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  >
    test
  </Text>
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={true}
    defaultValue=""
    editable={false}
    inputAccessoryViewID="id"
    keyboardType="phone-pad"
    maxLength={10}
    multiline={true}
    numberOfLines={1}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="test"
    placeholderTextColor="red"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={true}
    selectTextOnFocus={true}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        Object {
          "height": 150,
          "paddingTop": 20,
          "textAlignVertical": "top",
        },
        false,
        undefined,
        Object {
          "borderColor": "rgba(241, 39, 39, 1)",
          "borderWidth": 1,
        },
      ]
    }
    underlineColorAndroid="transparent"
    value="test"
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(241, 39, 39, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 12,
        "lineHeight": 18,
        "marginTop": 10,
        "width": "100%",
      }
    }
  >
    test error msg
  </Text>
</View>
`;

exports[`TextInput tests test all props Text Left input snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  >
    test
  </Text>
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={true}
    defaultValue=""
    editable={false}
    inputAccessoryViewID="id"
    keyboardType="phone-pad"
    maxLength={10}
    multiline={true}
    numberOfLines={1}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="test"
    placeholderTextColor="red"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={true}
    selectTextOnFocus={true}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        Object {
          "height": 150,
          "paddingTop": 20,
          "textAlignVertical": "top",
        },
        false,
        undefined,
        Object {
          "borderColor": "rgba(241, 39, 39, 1)",
          "borderWidth": 1,
        },
      ]
    }
    underlineColorAndroid="transparent"
    value="test"
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(241, 39, 39, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 12,
        "lineHeight": 18,
        "marginTop": 10,
        "width": "100%",
      }
    }
  >
    test error msg
  </Text>
</View>
`;

exports[`TextInput tests test render multiliane text input snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  />
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={false}
    defaultValue=""
    editable={true}
    inputAccessoryViewID="id"
    keyboardType="default"
    multiline={true}
    numberOfLines={5}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Placeholder"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={false}
    selectTextOnFocus={false}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        Object {
          "height": 150,
          "paddingTop": 20,
          "textAlignVertical": "top",
        },
        false,
        undefined,
        undefined,
      ]
    }
    underlineColorAndroid="transparent"
    value=""
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
</View>
`;

exports[`TextInput tests test render password text input snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  />
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={false}
    defaultValue=""
    editable={true}
    inputAccessoryViewID="id"
    keyboardType="default"
    multiline={false}
    numberOfLines={5}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Placeholder"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={true}
    selectTextOnFocus={false}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        undefined,
        false,
        undefined,
        undefined,
      ]
    }
    underlineColorAndroid="transparent"
    value=""
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
</View>
`;

exports[`TextInput tests test render text input snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  />
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={false}
    defaultValue=""
    editable={true}
    inputAccessoryViewID="id"
    keyboardType="default"
    multiline={false}
    numberOfLines={5}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Placeholder"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={false}
    selectTextOnFocus={false}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        undefined,
        false,
        undefined,
        undefined,
      ]
    }
    underlineColorAndroid="transparent"
    value="test"
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
</View>
`;

exports[`TextInput tests test render text input width right icon camera snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  />
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={false}
    defaultValue=""
    editable={true}
    inputAccessoryViewID="id"
    keyboardType="default"
    multiline={false}
    numberOfLines={5}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Placeholder"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={false}
    selectTextOnFocus={false}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        undefined,
        false,
        undefined,
        undefined,
      ]
    }
    underlineColorAndroid="transparent"
    value=""
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
</View>
`;

exports[`TextInput tests test render text input with error message snapshot 1`] = `
<View>
  <Text
    allowFontScaling={false}
    selectable={false}
    style={
      Object {
        "color": "rgba(26, 26, 26, 1)",
        "fontFamily": "Roboto-Bold",
        "fontSize": 14,
        "fontWeight": "400",
        "letterSpacing": 1,
        "lineHeight": 21,
      }
    }
  />
  <TextInput
    allowFontScaling={false}
    autoCapitalize="sentences"
    autoCorrect={false}
    defaultValue=""
    editable={true}
    inputAccessoryViewID="id"
    keyboardType="default"
    multiline={false}
    numberOfLines={5}
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="Placeholder"
    rejectResponderTermination={true}
    returnKeyType="done"
    secureTextEntry={false}
    selectTextOnFocus={false}
    style={
      Array [
        Object {
          "backgroundColor": "rgba(229, 229, 229, 0.3)",
          "borderRadius": 5,
          "color": "rgba(26, 26, 26, 1)",
          "fontFamily": "Roboto-Bold",
          "fontSize": 12,
          "fontWeight": "700",
          "height": 56,
          "letterSpacing": 1,
          "lineHeight": 15,
          "paddingLeft": 16,
          "paddingRight": 16,
          "width": "100%",
        },
        undefined,
        undefined,
        false,
        undefined,
        undefined,
      ]
    }
    underlineColorAndroid="transparent"
    value=""
  />
  <RCTInputAccessoryView
    nativeID="id"
    style={
      Array [
        undefined,
        Object {
          "position": "absolute",
        },
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "row",
          },
          Object {
            "justifyContent": "flex-end",
          },
        ]
      }
    >
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            OK
          </Text>
        </View>
      </View>
    </View>
  </RCTInputAccessoryView>
</View>
`;
